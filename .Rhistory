laliga_events <- matches_info_all_events[matches_info_all_events$competition.competition_name == "La Liga", ]
## 1. Find all "laliga" CSV files in the folder
file_paths_laliga <- list.files(
path = "football_data_co",
pattern = "^laliga_.*\\.csv$",
full.names = TRUE
)
## 2. Read and combine all files (with the final fix)
# Using fill = Inf is the most robust way to read inconsistent files.
laliga_dataco <- rbindlist(
lapply(file_paths_laliga, fread, fill = Inf), # <-- The final fix is here
fill = TRUE,
idcol = "source_file"
)
#####################################    Add some Id
laliga_dataco[, id := paste0("laliga", .I)]
setcolorder(laliga_dataco, "id")
#Add some Id
seriea_dataco[, id := paste0("seriea", .I)]
library(data.table)
library(jsonlite)
library(data.table)
library(stringdist)
library(stringi)
all_events_v2 <- fread("all_events_v2.csv")
cleaned_matches_info <- fread("cleaned_matches_info.csv")
########################################################################################################
#1) Sanity check. We start by checking that all matches from all_events_v2 appear in cleaned_matches_info
event_match_ids <- unique(all_events_v2$match_id)
info_match_ids <- cleaned_matches_info$match_id
# 2. Check 1: Are the match_ids in cleaned_matches_info unique?
# Your creation script should ensure this, but it's good practice to verify.
if (nrow(cleaned_matches_info) == length(unique(info_match_ids))) {
cat("✅ SUCCESS: All match_id's in 'cleaned_matches_info' are unique.\n")
} else {
cat("❌ FAILURE: There are duplicate match_id's in 'cleaned_matches_info'.\n")
}
# 3. Check 2: Do all event match_ids appear in the info table?
# We use setdiff() to find any IDs that are in the events but NOT in the info table.
missing_ids <- setdiff(event_match_ids, info_match_ids)
if (length(missing_ids) == 0) {
cat("✅ SUCCESS: All match_id's from 'all_events_v2' are present in 'cleaned_matches_info'.\n")
} else {
cat("❌ FAILURE: The following match_id's from 'all_events_v2' are MISSING from 'cleaned_matches_info':\n")
print(missing_ids)
}
# 4 Filter 'cleaned_matches_info' to keep only the rows with the match_ids from all_events_v2
matches_info_all_events <- cleaned_matches_info[match_id %in% event_match_ids]
##########################################################################################
############################## La Liga #############################################
##########################################################################################
laliga_events <- matches_info_all_events[matches_info_all_events$competition.competition_name == "La Liga", ]
## 1. Find all "laliga" CSV files in the folder
file_paths_laliga <- list.files(
path = "football_data_co",
pattern = "^laliga_.*\\.csv$",
full.names = TRUE
)
## 2. Read and combine all files (with the final fix)
# Using fill = Inf is the most robust way to read inconsistent files.
laliga_dataco <- rbindlist(
lapply(file_paths_laliga, fread, fill = Inf), # <-- The final fix is here
fill = TRUE,
idcol = "source_file"
)
#####################################    Add some Id
laliga_dataco[, id := paste0("laliga", .I)]
setcolorder(laliga_dataco, "id")
######################################   Match the names
dictionary_laliga <- data.table(
dataco_name = c(
"Ath Madrid", "Espanol", "Numancia", "Mallorca", "Osasuna", "Santander",
"Sevilla", "Sociedad", "Zaragoza", "Valencia", "Ath Bilbao", "Barcelona",
"Real Madrid", "Albacete", "Betis", "Getafe", "La Coruna", "Levante",
"Malaga", "Villarreal", "Alaves", "Cadiz", "Celta", "Recreativo",
"Gimnastic", "Murcia", "Almeria", "Valladolid", "Sp Gijon", "Tenerife",
"Xerez", "Hercules", "Granada", "Vallecano", "Elche", "Eibar",
"Cordoba", "Las Palmas", "Leganes", "Girona", "Huesca"
),
events_name = c(
"Atlético Madrid", "Espanyol", "CD Numancia de Soria", "Mallorca", "Osasuna", "Racing Santander",
"Sevilla", "Real Sociedad", "Real Zaragoza", "Valencia", "Athletic Club", "Barcelona",
"Real Madrid", "Albacete", "Real Betis", "Getafe", "RC Deportivo La Coruña", "Levante UD",
"Málaga", "Villarreal", "Deportivo Alavés", "Cádiz", "Celta Vigo", "Recreativo Huelva",
"Gimnàstic Tarragona", "Real Murcia CF", "Almería", "Real Valladolid", "Sporting Gijón", "Tenerife",
"Xerez", "Hércules", "Granada", "Rayo Vallecano", "Elche", "Eibar",
"Córdoba CF", "Las Palmas", "Leganés", "Girona", "Huesca"
)
)
# --- Validation Script ---
# 1. Get the unique names from your original data tables
dataco_original_teams <- unique(laliga_dataco$HomeTeam)
events_original_teams <- unique(laliga_events$home_team.home_team_name)
# --- Check 1: Validate the 'dataco_name' column ---
missing_in_dataco_col <- setdiff(dataco_original_teams, dictionary_laliga$dataco_name)
if (length(missing_in_dataco_col) == 0) {
cat("✅ SUCCESS: All teams from 'laliga_dataco' are present in the dictionary's 'dataco_name' column.\n")
} else {
cat("❌ WARNING: The following teams from 'laliga_dataco' are MISSING from the dictionary:\n")
print(missing_in_dataco_col)
}
# --- Check 2: Validate the 'events_name' column ---
missing_in_events_col <- setdiff(events_original_teams, dictionary_laliga$events_name)
if (length(missing_in_events_col) == 0) {
cat("\n✅ SUCCESS: All teams from 'laliga_events' are present in the dictionary's 'events_name' column.\n")
} else {
cat("\n❌ WARNING: The following teams from 'laliga_events' are MISSING from the dictionary:\n")
print(missing_in_events_col)
}
#laliga_dataco in the same format (names of the teams and date) that allevents
laliga_dataco_ready <- copy(laliga_dataco)
laliga_dataco_ready[dictionary_laliga, on = .(HomeTeam = dataco_name), HomeTeam := i.events_name]
laliga_dataco_ready[dictionary_laliga, on = .(AwayTeam = dataco_name), AwayTeam := i.events_name]
laliga_dataco_ready[, date_standard := as.Date(Date, format = "%d/%m/%y")]
dictionary_laliga
laliga_events
laliga_dataco
# --- 1. Prepare the 'laliga_events' Table for Joining ---
# To ensure a correct match, the date columns in both tables must be the same data type.
# Let's create a temporary copy and convert 'match_date' to a proper Date object.
events_to_join <- copy(laliga_events)
events_to_join[, match_date_standard := as.Date(match_date)]
# --- 2. Perform the Join to Find Matching IDs ---
# This single command performs the entire matching logic.
# It joins the two tables based on the three key columns.
laliga_events_dataco <- laliga_dataco_ready[events_to_join,
on = .(
HomeTeam == home_team.home_team_name,
AwayTeam == away_team.away_team_name,
date_standard == match_date_standard
),
# For each match, create the two columns you want:
.(
dataco_id = i.id,         # 'id' from the right table (laliga_dataco_ready)
events_id = x.match_id      # 'match_id' from the left table (events_to_join)
)
]
events_to_join <- copy(laliga_events)
events_to_join[, match_date_standard := as.Date(match_date)]
# This single command performs the entire matching logic.
# It joins the two tables based on the three key columns.
laliga_events_dataco <- laliga_dataco_ready[events_to_join,
on = .(
HomeTeam == home_team.home_team_name,
AwayTeam == away_team.away_team_name,
date_standard == match_date
),
# For each match, create the two columns you want:
.(
dataco_id = i.id,         # 'id' from the right table (laliga_dataco_ready)
events_id = x.match_id      # 'match_id' from the left table (events_to_join)
)
]
# This single command performs the entire matching logic.
# It joins the two tables based on the three key columns.
laliga_events_dataco <- laliga_dataco_ready[events_to_join,
on = .(
HomeTeam == home_team.home_team_name,
AwayTeam == away_team.away_team_name,
date_standard == match_date
),
# For each match, create the two columns you want:
.(
dataco_id =id,         # 'id' from the right table (laliga_dataco_ready)
events_id = match_id      # 'match_id' from the left table (events_to_join)
)
]
# --- 1. Prepare the 'laliga_events' Table for Joining ---
# To ensure a correct match, the date columns in both tables must be the same data type.
# Let's create a temporary copy and convert 'match_date' to a proper Date object.
events_to_join <- copy(laliga_events)
events_to_join[, match_date_standard := as.Date(match_date)]
# --- 2. Perform the Join to Find Matching IDs ---
# This single command performs the entire matching logic.
# It joins the two tables based on the three key columns.
laliga_events_dataco <- laliga_dataco_ready[events_to_join,
on = .(
HomeTeam == home_team.home_team_name,
AwayTeam == away_team.away_team_name,
date_standard == match_date
),
# For each match, create the two columns you want:
.(
dataco_id =id,         # 'id' from the right table (laliga_dataco_ready)
events_id = match_id      # 'match_id' from the left table (events_to_join)
)
]
cat("✅ Join complete. 'laliga_events_dataco' has been created.\n\n")
laliga_events_dataco' has been created.\n\n")
# --- 3. Verification ---
cat("--- Verification Steps ---\n")
# Check that the number of rows is correct
rows_events <- nrow(laliga_events)
rows_final <- nrow(laliga_events_dataco)
cat("Number of rows in original 'laliga_events':", rows_events, "\n")
# --- 1. Prepare the 'laliga_events' Table for Joining ---
# This step is crucial to ensure the date formats match.
events_to_join <- copy(laliga_events)
events_to_join[, match_date_standard := as.Date(match_date)]
# This single command performs the entire matching logic correctly.
laliga_events_dataco <- events_to_join[laliga_dataco_ready,
on = .(
home_team.home_team_name == HomeTeam,
away_team.home_team_name == AwayTeam,
match_date_standard == date_standard
),
# For each row in events_to_join, create the two columns you want:
.(
dataco_id = i.id,         # 'id' from the right table (laliga_dataco_ready)
events_id = x.match_id      # 'match_id' from the left table (events_to_join)
)
]
# This single command performs the entire matching logic correctly.
laliga_events_dataco <- events_to_join[laliga_dataco_ready,
on = .(
home_team.home_team_name == HomeTeam,
away_team.away_team_name == AwayTeam,
match_date_standard == date_standard
),
# For each row in events_to_join, create the two columns you want:
.(
dataco_id = i.id,         # 'id' from the right table (laliga_dataco_ready)
events_id = x.match_id      # 'match_id' from the left table (events_to_join)
)
]
# --- 3. Verification ---
cat("--- Verification Steps ---\n")
# Check that the number of rows is correct
rows_events <- nrow(laliga_events)
rows_final <- nrow(laliga_events_dataco)
cat("Number of rows in original 'laliga_events':", rows_events, "\n")
cat("Number of rows in final 'laliga_events_dataco':", rows_final, "\n")
if (rows_events == rows_final) {
cat("✅ Row count is correct, as expected for a left join.\n\n")
} else {
cat("❌ WARNING: Row count is incorrect.\n\n")
}
# Show a preview of the successfully matched rows
cat("--- Preview of Matched Rows ---\n")
print(head(laliga_events_dataco[!is.na(dataco_id)]))
# Show a preview of rows where no match was found
cat("\n--- Preview of Unmatched Rows (with NA) ---\n")
print(head(laliga_events_dataco[is.na(dataco_id)]))
View(laliga_events_dataco)
# To keep all rows from 'events_to_join', it must be the 'i' table (inside the brackets).
laliga_events_dataco <- laliga_dataco_ready[events_to_join,
on = .(
HomeTeam == home_team.home_team_name,
AwayTeam == away_team.away_team_name,
date_standard == match_date_standard
),
# For each row in events_to_join, create the two columns you want:
.(
dataco_id = x.id,         # 'id' from the left table (laliga_dataco_ready)
events_id = i.match_id      # 'match_id' from the right table (events_to_join)
)
]
# --- 3. Verification ---
cat("--- Verification Steps ---\n")
# Check that the number of rows is correct
rows_events <- nrow(laliga_events)
rows_final <- nrow(laliga_events_dataco)
cat("Number of rows in original 'laliga_events':", rows_events, "\n")
cat("Number of rows in final 'laliga_events_dataco':", rows_final, "\n")
if (rows_events == rows_final) {
cat("✅ Row count is correct. All rows from 'laliga_events' were kept.\n\n")
} else {
cat("❌ WARNING: Row count is incorrect.\n\n")
}
# Show a preview of the successfully matched rows
cat("--- Preview of Matched Rows ---\n")
print(head(laliga_events_dataco[!is.na(dataco_id)]))
# Show a preview of rows where no match was found
cat("\n--- Preview of Unmatched Rows (with NA) ---\n")
print(head(laliga_events_dataco[is.na(dataco_id)]))
View(laliga_events_dataco)
head(laliga_events_dataco)
View(laliga_events)
no_matching_laliga <- laliga_events_dataco[is.na(dataco_id), .(`events_id`)]
no_matching_laliga <- laliga_events_dataco[is.na(dataco_id), .(`events_id`)]
unmatched_events_details <- laliga_events[match_id %in% no_matching_laliga$events_id]
no_matching_laliga <- laliga_events_dataco[is.na(dataco_id), .(`events_id`)]
unmatched_events_details <- laliga_events[match_id %in% no_matching_laliga$events_id]
print(unmatched_events_details)
View(unmatched_events_details)
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[date_standard == as.Date("2018-09-15")]
View(laliga_dataco_ready)
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" ]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam="Levante UD"]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Levante UD"]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Barcelona"]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Barcelona"& data_standard == 2019]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Barcelona"& standard_data == 2019]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Barcelona"& date_standard == 2019]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Barcelona"& date_standard == 2018]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" | AwayTeam=="Barcelona"& date_standard == 2018]
8
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Barcelona"& date_standard == 2019]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & AwayTeam=="Barcelona"& date_standard == 2018]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad& date_standard == 2018]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & date_standard == 2018]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & date_standard == 2018]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad"]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & year(date_standard) == 2018]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & year(date_standard) == 2018& month(date_standard) == 9]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[HomeTeam == "Real Sociedad" & year(date_standard) == 2018 & month(date_standard) == 9]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[  HomeTeam == "Real Sociedad" &
year(date_standard) == 2018 &
month(date_standard) == 9]
laliga_dataco_ready[  HomeTeam == "Real Sociedad" &
year(date_standard) == 2018 &
month(date_standard) == 9]
# Filter the data.table where 'date_standard' matches the specified date
laliga_dataco_ready[  HomeTeam == "Real Sociedad" &
year(date_standard) == 2018 ]
print(
laliga_dataco_ready[
HomeTeam == "Real Sociedad" & year(date_standard) == 2018
],
nrows = Inf
)
sociedad_2018 <- laliga_dataco_ready[
HomeTeam == "Real Sociedad" & year(date_standard) == 2018
]
View(sociedad_2018)
# Filter the data.table where 'date_standard' matches the specified date
sociedad_2018 <- laliga_dataco_ready[
(HomeTeam == "Real Sociedad"|AwayTeam == "Real Sociedad") & year(date_standard) == 2018
]
sociedad_2018 <- laliga_dataco_ready[
(HomeTeam == "Real Sociedad"|AwayTeam == "Real Sociedad")
]
library(data.table)
library(jsonlite)
library(data.table)
library(stringdist)
library(stringi)
library(lubridate) # Make sure to load the package
library(data.table)
library(jsonlite)
library(data.table)
library(stringdist)
library(stringi)
library(lubridate) # Make sure to load the package
all_events_v2 <- fread("all_events_v2.csv")
cleaned_matches_info <- fread("cleaned_matches_info.csv")
########################################################################################################
#1) Sanity check. We start by checking that all matches from all_events_v2 appear in cleaned_matches_info
event_match_ids <- unique(all_events_v2$match_id)
info_match_ids <- cleaned_matches_info$match_id
# 2. Check 1: Are the match_ids in cleaned_matches_info unique?
# Your creation script should ensure this, but it's good practice to verify.
if (nrow(cleaned_matches_info) == length(unique(info_match_ids))) {
cat("✅ SUCCESS: All match_id's in 'cleaned_matches_info' are unique.\n")
} else {
cat("❌ FAILURE: There are duplicate match_id's in 'cleaned_matches_info'.\n")
}
# 3. Check 2: Do all event match_ids appear in the info table?
# We use setdiff() to find any IDs that are in the events but NOT in the info table.
missing_ids <- setdiff(event_match_ids, info_match_ids)
if (length(missing_ids) == 0) {
cat("✅ SUCCESS: All match_id's from 'all_events_v2' are present in 'cleaned_matches_info'.\n")
} else {
cat("❌ FAILURE: The following match_id's from 'all_events_v2' are MISSING from 'cleaned_matches_info':\n")
print(missing_ids)
}
# 4 Filter 'cleaned_matches_info' to keep only the rows with the match_ids from all_events_v2
matches_info_all_events <- cleaned_matches_info[match_id %in% event_match_ids]
##########################################################################################
############################## La Liga #############################################
##########################################################################################
laliga_events <- matches_info_all_events[matches_info_all_events$competition.competition_name == "La Liga", ]
## 1. Find all "laliga" CSV files in the folder
file_paths_laliga <- list.files(
path = "football_data_co",
pattern = "^laliga_.*\\.csv$",
full.names = TRUE
)
## 2. Read and combine all files (with the final fix)
# Using fill = Inf is the most robust way to read inconsistent files.
laliga_dataco <- rbindlist(
lapply(file_paths_laliga, fread, fill = Inf), # <-- The final fix is here
fill = TRUE,
idcol = "source_file"
)
#####################################    Add some Id
laliga_dataco[, id := paste0("laliga", .I)]
setcolorder(laliga_dataco, "id")
######################################   Match the names
dictionary_laliga <- data.table(
dataco_name = c(
"Ath Madrid", "Espanol", "Numancia", "Mallorca", "Osasuna", "Santander",
"Sevilla", "Sociedad", "Zaragoza", "Valencia", "Ath Bilbao", "Barcelona",
"Real Madrid", "Albacete", "Betis", "Getafe", "La Coruna", "Levante",
"Malaga", "Villarreal", "Alaves", "Cadiz", "Celta", "Recreativo",
"Gimnastic", "Murcia", "Almeria", "Valladolid", "Sp Gijon", "Tenerife",
"Xerez", "Hercules", "Granada", "Vallecano", "Elche", "Eibar",
"Cordoba", "Las Palmas", "Leganes", "Girona", "Huesca"
),
events_name = c(
"Atlético Madrid", "Espanyol", "CD Numancia de Soria", "Mallorca", "Osasuna", "Racing Santander",
"Sevilla", "Real Sociedad", "Real Zaragoza", "Valencia", "Athletic Club", "Barcelona",
"Real Madrid", "Albacete", "Real Betis", "Getafe", "RC Deportivo La Coruña", "Levante UD",
"Málaga", "Villarreal", "Deportivo Alavés", "Cádiz", "Celta Vigo", "Recreativo Huelva",
"Gimnàstic Tarragona", "Real Murcia CF", "Almería", "Real Valladolid", "Sporting Gijón", "Tenerife",
"Xerez", "Hércules", "Granada", "Rayo Vallecano", "Elche", "Eibar",
"Córdoba CF", "Las Palmas", "Leganés", "Girona", "Huesca"
)
)
# --- Validation Script ---
# 1. Get the unique names from your original data tables
dataco_original_teams <- unique(laliga_dataco$HomeTeam)
events_original_teams <- unique(laliga_events$home_team.home_team_name)
# --- Check 1: Validate the 'dataco_name' column ---
missing_in_dataco_col <- setdiff(dataco_original_teams, dictionary_laliga$dataco_name)
if (length(missing_in_dataco_col) == 0) {
cat("✅ SUCCESS: All teams from 'laliga_dataco' are present in the dictionary's 'dataco_name' column.\n")
} else {
cat("❌ WARNING: The following teams from 'laliga_dataco' are MISSING from the dictionary:\n")
print(missing_in_dataco_col)
}
# --- Check 2: Validate the 'events_name' column ---
missing_in_events_col <- setdiff(events_original_teams, dictionary_laliga$events_name)
if (length(missing_in_events_col) == 0) {
cat("\n✅ SUCCESS: All teams from 'laliga_events' are present in the dictionary's 'events_name' column.\n")
} else {
cat("\n❌ WARNING: The following teams from 'laliga_events' are MISSING from the dictionary:\n")
print(missing_in_events_col)
}
#laliga_dataco in the same format (names of the teams and date) that allevents
laliga_dataco_ready <- copy(laliga_dataco)
laliga_dataco_ready[dictionary_laliga, on = .(HomeTeam = dataco_name), HomeTeam := i.events_name]
laliga_dataco_ready[dictionary_laliga, on = .(AwayTeam = dataco_name), AwayTeam := i.events_name]
laliga_dataco_ready[, date_standard := dmy(Date)]
# --- 1. Prepare the 'laliga_events' Table for Joining ---
# This step is still correct and necessary.
events_to_join <- copy(laliga_events)
events_to_join[, match_date_standard := as.Date(match_date)]
# --- 2. Perform the Join (Corrected Direction) ---
# To keep all rows from 'events_to_join', it must be the 'i' table (inside the brackets).
laliga_events_dataco <- laliga_dataco_ready[events_to_join,
on = .(
HomeTeam == home_team.home_team_name,
AwayTeam == away_team.away_team_name,
date_standard == match_date_standard
),
# For each row in events_to_join, create the two columns you want:
.(
dataco_id = x.id,         # 'id' from the left table (laliga_dataco_ready)
events_id = i.match_id      # 'match_id' from the right table (events_to_join)
)
]
#No matching events
no_matching_laliga <- laliga_events_dataco[is.na(dataco_id), .(`events_id`)]
unmatched_events_details <- laliga_events[match_id %in% no_matching_laliga$events_id]
print(unmatched_events_details)
######################################   Match the names
seriea_dataco
##########################################################################################
############################## Serie A#############################################
##########################################################################################
seriea_events <- matches_info_all_events[matches_info_all_events$competition.competition_name == "Serie A", ]
## 1. Find all "seriea" CSV files in the folder
file_paths_seriea <- list.files(
path = "football_data_co",
pattern = "^seriea_.*\\.csv$",
full.names = TRUE
)
## 2. Read and combine all files (with the final fix)
# Using fill = Inf is the most robust way to read inconsistent files.
seriea_dataco <- rbindlist(
lapply(file_paths_seriea, fread, fill = Inf), # <-- The final fix is here
fill = TRUE,
idcol = "source_file"
)
#Add some Id
seriea_dataco[, id := paste0("seriea", .I)]
setcolorder(seriea_dataco, "id")
######################################   Match the names
seriea_dataco
######################################   Match the names
unique(seriea_dataco$HomeTeam)
View(seriea_events)
View(seriea_dataco)
seriea_events$home.team_home.team.name
seriea_events$home.team_home.team_name
seriea_events$home.team.hometeam_name
seriea_events$home.team.home-team_name
seriea_events$home.team.home_team_name
seriea_events
seriea_events$home_team.home_team_name
unique(seriea_events$home_team.home_team_name)
